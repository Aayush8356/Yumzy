name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yumzy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL..."
          sleep 1
        done

    - name: Create test database
      run: |
        PGPASSWORD=postgres createdb -h localhost -U postgres yumzy_test || echo "Database already exists"
      env:
        PGPASSWORD: postgres

    - name: Type check
      run: npm run type-check

    - name: Lint code
      run: npm run lint

    - name: Copy test environment file
      run: cp .env.test .env.local

    - name: Run tests
      run: npm test -- --ci --watchAll=false --coverage=false
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yumzy_test
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/yumzy_test
        JWT_SECRET: test-jwt-secret-for-ci
        BCRYPT_ROUNDS: 4
        NODE_ENV: test
        CI: true
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        UNSPLASH_ACCESS_KEY: kWDk-NvD5EmOwEX1ff54RVExiWbGEW9qpuIs0wSvZGY
        UNSPLASH_SECRET_KEY: _qo9Pp_VvReY2a_tKJSu37uzM_RwLCqYefhChBdI5Qs
        NEXT_PUBLIC_RAZORPAY_KEY_ID: rzp_live_Id6ureskMPEgy9
        RAZORPAY_KEY_SECRET: 5DswpMfZj6Xcqg2fJMFfxK3W
        ENABLE_DEMO_DATA: false
        SEED_DEMO_DATA: false

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        JWT_SECRET: test-jwt-secret-for-ci
        UNSPLASH_ACCESS_KEY: kWDk-NvD5EmOwEX1ff54RVExiWbGEW9qpuIs0wSvZGY
        UNSPLASH_SECRET_KEY: _qo9Pp_VvReY2a_tKJSu37uzM_RwLCqYefhChBdI5Qs
        NEXT_PUBLIC_RAZORPAY_KEY_ID: rzp_live_Id6ureskMPEgy9
        RAZORPAY_KEY_SECRET: 5DswpMfZj6Xcqg2fJMFfxK3W
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yumzy_test
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/yumzy_test
        BCRYPT_ROUNDS: 4
        NODE_ENV: production

    # Coverage upload disabled - tests run without coverage for CI speed

  security:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://yumzy.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_APP_URL: https://yumzy.app
        JWT_SECRET: your-super-secret-jwt-key-for-yumzy-app-2024
        # Real credentials for production
        UNSPLASH_ACCESS_KEY: kWDk-NvD5EmOwEX1ff54RVExiWbGEW9qpuIs0wSvZGY
        UNSPLASH_SECRET_KEY: _qo9Pp_VvReY2a_tKJSu37uzM_RwLCqYefhChBdI5Qs
        # Razorpay - dummy/simulation values (gracefully handled by code)
        NEXT_PUBLIC_RAZORPAY_KEY_ID: rzp_live_Id6ureskMPEgy9
        RAZORPAY_KEY_SECRET: 5DswpMfZj6Xcqg2fJMFfxK3W
        DATABASE_URL: postgresql://postgres:Aayush%401076@db.bnigaokzunwsfaijkzva.supabase.co:5432/postgres
        NODE_ENV: production

    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}